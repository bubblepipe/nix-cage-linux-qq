#!/usr/bin/env python3
from argparse import ArgumentParser
from os.path import isabs, abspath, expanduser
from shutil import which
from subprocess import Popen as Subprocess
from os import environ
from hashlib import sha1
from functools import reduce
from sys import stdin, stdout, stderr
from json import load as json_unmarshal, dump as json_marshal
from pwd import getpwnam
from string import Template

system_streams = {
    "stdin" : stdin,
    "stdout": stdout,
    "stderr": stderr,
}

backends = [
    "rkt",
    "bwrap"
]
privileged_backends = [
    "rkt"
]
default_backend = "bwrap"

def run(executable, arguments, streams=system_streams):
    path = executable
    if not isabs(executable):
        path = which(executable)

    return Subprocess(
        [path] + arguments,
        **streams
    )

def expand_args(args):
    nargs = args.copy()

    nargs["config"] = abspath(expand(args["config"]))
    return nargs

def expand(v):
    return Template(
        expanduser(
            v
        )
    ).substitute(environ)


def identify(v):
    h = sha1()
    h.update(v.encode("utf8"))
    return h.hexdigest()[:7]

def get_user(user):
    p = getpwnam(user)
    return {
        "user": p.pw_name,
        "uid": p.pw_uid,
        "gid": p.pw_gid
    }

def backend_config_flags(backend, config):
    backend_config = config.get(backend, {})

    def get_mountpoints(config, group):
        return config.get(
            "mountpoints",
            {}
        ).get(
            group,
            []
        )

    def expand_mountpoints(config):
        for k, v in config:
            yield (expand(k), expand(v),)

    def expand_environment(environment):
        res = {}
        for k, v in environment.items():
            res[k] = expand(v)
        return res

    if backend == "rkt":
        def environment_flags(environ):
            return [
                "--set-env={}={}".format(k, v)
                for k, v in environ.items()
            ]

        def mountpoints_flags(mountpoints, rw=True):
            return list(
                reduce(
                    lambda acc, v: acc + [
                        s.format(
                            name=identify(v[0] + " -> " + v[1]),
                            source=v[0],
                            target=v[1],
                            ro=""
                            # FIXME: Imagemagick is notification ready,
                            # otherwise: ",readOnly" if not rw else ""
                        )
                        for s in [
                                "--volume={name},kind=host,source={source}{ro}",
                                "--mount=volume={name},target={target}",
                        ]
                    ],
                    mountpoints,
                    []
                )
            )

        user = get_user(environ["USER"])

        return ["run"] + [
            "--interactive",
            backend_config["container"]
        ] + mountpoints_flags(
            list(
                expand_mountpoints(
                    get_mountpoints(config, "rw")
                )
            ),
            rw=True
        ) + mountpoints_flags(
            list(
                expand_mountpoints(
                    get_mountpoints(config, "ro")
                )
            ),
            rw=False
        ) + environment_flags(
            expand_environment(
                config.get("environment", {})
            )
        ) + environment_flags(
            {
                "DEOMTE_USER": user["user"],
                "DEMOTE_UID": user["uid"],
                "DEMOTE_GID": user["gid"],
                "TERM": environ.get(
                    "TERM",
                    "screen-256color"
                )
            }
        ) + [
            "--dns=208.67.222.222",
            "--net=host"
        ]

    if backend == "bwrap":
        def environment_flags(environ):
            return list(
                reduce(
                    lambda acc, v: acc + v,
                    [
                        ["--setenv", k, v]
                        for k, v in environ.items()
                    ]
                )
            )

        def mountpoints_flags(mountpoints, rw=True):
            return list(
                reduce(
                    lambda acc, v: acc + [
                        s.format(
                            name=identify(v[0] + " -> " + v[1]),
                            source=v[0],
                            target=v[1],
                            ro="ro-" if not rw else ""
                        )
                        for s in ["--{ro}bind", "{source}", "{target}"]
                    ],
                    mountpoints,
                    []
                )
            )

        return [
            "--ro-bind",  "/",    "/",
            "--dev-bind", "/dev", "/dev",
            "--die-with-parent"
        ] + mountpoints_flags(
            list(
                expand_mountpoints(
                    get_mountpoints(config, "rw")
                )
            ),
            rw=True
        ) + mountpoints_flags(
            list(
                expand_mountpoints(
                    get_mountpoints(config, "ro")
                )
            ),
            rw=False
        ) + environment_flags(
            expand_environment(
                config.get("environment", {})
            )
        ) + environment_flags(
            {
                "TERM": environ.get(
                    "TERM",
                    "screen-256color"
                )
            }
        ) + [
            "emacs",
            "-nw", "-l", "/home/user/.emacs.d/init.el"
        ]

    return ["--help"]


def config_flags(config):
    backend = config.get(
        "backend",
        default_backend
    )

    return (
        ["sudo"]
        if backend in privileged_backends
        else []
    ) + [
        backend
    ] + config.get(
        backend,
        {}
    ).get(
        "arguments",
        []
    ) + backend_config_flags(
        backend,
        config
    )

def main(args, rest=[]):
    with open(args["config"], "r") as stream:
        config = json_unmarshal(stream)

    config.update(args)

    cage_args = ["--"] + rest if len(rest) > 0 else []
    commandline = [
        "{}={}".format(k, v)
        for k, v in environ.items()
        if k.lower().startswith("http_") or \
        k.lower().startswith("https_")
    ] + config_flags(
        config
    ) + cage_args

    command = commandline[0]
    flags = commandline[1:]
    code = run(command, flags).wait()
    if code != 0:
        raise RuntimeError(
            "Backend {} exit with non zero code {}".format(
                config.get(
                    "backend",
                    args["backend"],
                ),
                code
            )
        )

if __name__ == "__main__":
    p = ArgumentParser()
    p.add_argument(
        "--backend",
        help="Virtualisation backend to use: {}".format(backends),
        default=default_backend
    )
    p.add_argument(
        "config",
        help="Devcage config file path"
    )
    args, rest = p.parse_known_args()
    main(
        expand_args(
            args.__dict__
        ),
        rest
    )
