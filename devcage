#!/usr/bin/env python3
from argparse import ArgumentParser
from os.path import isabs, abspath, expanduser
from shutil import which
from subprocess import Popen as Subprocess
from os import environ
from hashlib import sha1
from functools import reduce
from sys import stdin, stdout, stderr
from json import load as json_unmarshal, dump as json_marshal
from pwd import getpwnam

system_streams = {
    "stdin" : stdin,
    "stdout": stdout,
    "stderr": stderr,
}

def run(executable, arguments, streams=system_streams):
    path = executable
    if not isabs(executable):
        path = which(executable)

    return Subprocess(
        [path] + arguments,
        **streams
    )

def expand_args(args):
    nargs = args.copy()

    nargs["config"] = expand(args["config"])
    return nargs

def expand(v):
    return abspath(
        expanduser(
            v
        )
    )

def identify(v):
    h = sha1()
    h.update(v.encode("utf8"))
    return h.hexdigest()[:7]

def get_mountpoints(config):
    mountpoints = {}
    for k, v in config.get("mountpoints", {}).items():
        mountpoints[expand(k)] = expand(v)

    return mountpoints

def command_from_mountpoints(mountpoints):
    return list(
        reduce(
            lambda acc, v: acc + [
                s.format(
                    name=identify(v[0] + " -> " + v[1]),
                    source=v[0],
                    target=v[1]
                )
                for s in [
                        "--volume={name},kind=host,source={source}",
                        "--mount=volume={name},target={target}",
                ]
            ],
            mountpoints.items(),
            []
        )
    )

def get_user(user):
    p = getpwnam(user)
    return {
        "user": p.pw_name,
        "uid": p.pw_uid,
        "gid": p.pw_gid
    }

def command_from_user(user):
    return [
        "--set-env=DEMOTE_UID={uid}".format(**user),
        "--set-env=DEMOTE_GID={gid}".format(**user),
    ]

def command_from_environ(environ):
    return [
        "--set-env=TERM={TERM}".format(**environ),
    ]

def command_from_config(config):
    return ["rkt"] + config.get(
        "rktArguments",
        []
    ) + ["run"] + [
        "--interactive",
        config["container"]
    ] + config.get(
        "containerArguments",
        []
    ) + command_from_mountpoints(
        get_mountpoints(config)
    ) + command_from_user(
        get_user(environ["USER"])
    ) + command_from_environ(environ) + [
        "--dns=208.67.222.222",
        "--net=host"
    ]


def main(args, rest=[]):
    with open(args["config"], "r") as stream:
        config = json_unmarshal(stream)

    cage_args = ["--"] + rest if len(rest) > 0 else []

    code = run(
        "sudo",
        command_from_config(config) + cage_args
    ).wait()
    if code != 0:
        raise RuntimeError(
            "Rkt exit with non zero code {}".format(code)
        )

if __name__ == "__main__":
    p = ArgumentParser()
    p.add_argument(
        "config",
        help="Devcage config file path"
    )
    args, rest = p.parse_known_args()
    main(
        expand_args(
            args.__dict__
        ),
        rest
    )
