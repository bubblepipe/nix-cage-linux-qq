#!/usr/bin/env python
from argparse import ArgumentParser
from os import execve
from os.path import isabs, abspath, expanduser, basename, realpath, exists
from shutil import which
from shlex import quote as shell_escape
from os import environ, sep
from sys import stderr
from functools import reduce
from json import load as json_unmarshal, dump as json_marshal, dumps as json_marshal_str
from pwd import getpwnam
from string import Template
from collections import defaultdict

mount_suffixes = [
    "ro",
    "rw",
    "dev",
    "tmpfs"
]

def expand(v, ctx=environ):
    return Template(expanduser(v)).substitute(
        defaultdict(str, ctx)
    )

def realpathwhich(v):
    path = which(v)
    if path:
        return realpath(path)
    return v

def json_marshal_pretty_str(v):
    return json_marshal_str(
        v,
        indent=4
    )

def log(arguments, v):
    if arguments["verbose"]:
        stderr.write(
            json_marshal_pretty_str(v) + "\n"
        )

def split_path(v):
    buf = ""
    res = []

    for c in v:
        if c == sep:
            if len(buf) > 0:
                res.append(buf)
                buf = ""
            res.append(c)
        else:
            buf += c

    if len(buf) > 0:
        res.append(buf)

    return res

def split_mount_suffix(v):
    for suffix in mount_suffixes:
        delimited = ":" + suffix
        if v.endswith(delimited):
            return (
                v[:-len(delimited)],
                suffix,
            )
    return (v, None)

def get_user(user):
    p = getpwnam(user)
    return {
        "user": p.pw_name,
        "uid": p.pw_uid,
        "gid": p.pw_gid
    }

def flags_from_config(config):
    def environment(environ):
        return list(
            reduce(
                lambda acc, v: acc + v,
                [
                    ["--setenv", k, v]
                    for k, v in environ.items()
                ]
            )
        )

    return list(
        reduce(
            lambda acc, v: acc + v,
            map(
                lambda v: (
                    ["--ro-bind"            ] + list(v[1]) if v[0] == "ro"
                    else ["--bind"          ] + list(v[1]) if v[0] == "rw"
                    else ["--dev-bind"      ] + list(v[1]) if v[0] == "dev"
                    else ["--tmpfs", v[1][1]]              if v[0] == "tmpfs"
                    else []
                ),
                sorted_mounts(config["mounts"])
            ),
            []
        )
    ) + list(
        reduce(
            lambda acc, kv: acc + ["--setenv"] + list(kv),
            config["environment"].items(),
            []
        )
    ) + config["arguments"]["bwrap"] + [
        # XXX: Do not resolve the symlink for nix-shell!
        # This tool looks on her name(thank you for two hours of wasted time)
        # /nix/store/2ricrzvjhlaklihi6q97r1sb0z83lfir-nix-1.11.15/bin/nix-shell -> nix-build
        # If we will use nix-build then we will end up with this error:
        # variable $src or $srcs should point to the source
        # > WTF?!!? I just want environment, why do I need this src/srcs?!
        # > you are using nix-build, not nix-shell, boy
        which("nix-shell")
    ] + config["arguments"]["nix-shell"] + (
        [config["arguments"]["entrypoint"]]
        if config["arguments"]["entrypoint"]
        else []
    ) + [
        # XXX: Waaaat? --command is just not working
        # (or am I understand it's purpose incorrectly?)
        # Why software written in perl is always so buggy?
        "--command",
        " ".join(
            [
                shell_escape(v)
                for v in config["arguments"]["command"]
            ]
        ),
    ]

def config_from_file(config, arguments):
    if not arguments["config"] or not exists(arguments["config"]):
        return config

    with open(arguments["config"], "r") as stream:
        c = json_unmarshal(stream)
        for k, v in c.get("mounts", {}).items():
            config["mounts"][k] += v
        config["environment"].update(
            c.get("environment", {})
        )
        config["arguments"].update(
            c.get("arguments", {})
        )
    return config

def config_from_arguments(config, arguments, rest):
    if arguments["command"]:
        config["arguments"]["command"] = arguments["command"]

    if arguments["entrypoint"]:
        config["arguments"]["entrypoint"] = arguments["entrypoint"]

    config["arguments"]["bwrap"] += rest

    for path in arguments["path"]:
        path, suffix = split_mount_suffix(path)
        if not suffix:
            suffix = "rw"
        if suffix == "tmpfs":
            config["mounts"][suffix].append(path)
        else:
            config["mounts"][suffix].append(
                (path, path,)
            )
    return config

def expand_config(config):
    for k, v in config["mounts"].items():
        config["mounts"][k] = [
            (
                lambda v: (
                    abspath(expand(v[0])),
                    abspath(expand(v[1])),
                )
            )((v, v) if type(v) is str else v)
            for v in config["mounts"][k]
        ]

    for k, v in config["environment"].items():
        config["environment"][k] = expand(v)

    v = (
        config["arguments"]["command"]
        if type(config["arguments"]["command"]) is list
        else config["arguments"]["command"].split(" ")
    )
    v = [expand(v[0])] + v[1:]
    if not isabs(v[0]):
        v[0] = realpathwhich(v[0])
    config["arguments"]["command"] = v

    if config["arguments"]["entrypoint"]:
        config["arguments"]["entrypoint"] = abspath(
            expand(config["arguments"]["entrypoint"])
        )

    return config


def expand_arguments(arguments):
    if arguments["config"]:
        arguments["config"] = abspath(expand(arguments["config"]))

    if arguments["command"]:
        v = (
            arguments["command"]
            if type(arguments["command"]) is list
            else arguments["command"].split(" ")
        )
        v = [expand(v[0])] + v[1:]
        if not isabs(v[0]):
            v[0] = realpathwhich(v[0])
        arguments["command"] = v

    if arguments["entrypoint"]:
        arguments["entrypoint"] = abspath(
            expand(arguments["entrypoint"])
        )

    arguments["path"] = [
        (
            lambda path, suffix: abspath(expand(path)) + (
                (":" + suffix) if suffix else ""
            )
        )(*split_mount_suffix(path))
        for path in arguments["path"]
    ]

    return arguments

def sorted_mounts(mounts):
    ms = []
    for k, v in mounts.items():
        for mount in v:
            ms.append(
                (k, mount,)
            )

    ws = {}
    for k1, p1 in enumerate(ms):
        w = []

        for k2, p2 in enumerate(ms):
            if k1 == k2:
                continue

            p1s = split_path(p1[1][1])
            p2s = split_path(p2[1][1])
            n = 0

            for v in p2s:
                if len(p1s) <= n or len(p2s) <= n:
                    break
                if v == p1s[n]:
                    n += 1
                else:
                    break

            if len(p1s) > len(p2s):
                n += 1

            w.append(n)

        ws[p1] = max(w)

    return map(
        lambda v: v[1],
        sorted(
            [(v, k,) for k, v in ws.items()],
            key=lambda v: v[0]
        )
    )


def main(config, arguments, rest=[]):
    if arguments["show_default_config"]:
        print(
            json_marshal_pretty_str(config)
        )
        return

    command = realpathwhich("bwrap")
    expanded_arguments = expand_arguments(arguments)
    expanded_config = expand_config(
        config_from_arguments(
            config_from_file(
                config,
                expanded_arguments
            ),
            expanded_arguments,
            rest
        )
    )

    flags = flags_from_config(expanded_config)

    log(
        expanded_arguments,
        {
            "arguments": expanded_arguments,
            "config": expanded_config,
            "command": command,
            "flags": flags,
        }
    )

    execve(
        command,
        [basename(command)] + flags,
        environ
    )

if __name__ == "__main__":
    user = get_user(environ["USER"])
    default_config = {
        "mounts": {
            "rw":    ["."], # [(from, to), (from, to), ...] | [to, to, ...]
            "ro":    ["/"], # [(from, to), (from, to), ...] | [to, to, ...]
            "dev":   ["/dev"], # [(from, to), (from, to), ...] | [to, to, ...]
            "tmpfs": list(
                filter(
                    exists,
                    [
                        "/tmp",
                        "/run/user/{uid}".format(**user),
                        "/run/media/{user}".format(**user)
                    ]
                )
            ), # [to, to, ...]
        },
        "environment": {
            "HOME":       environ["HOME"],
            "TERM":       environ["TERM"],
            "SHELL":      environ["SHELL"],
            "NIX_REMOTE": "daemon",
        },
        "arguments": {
            "entrypoint": "shell.nix",
            "command":    [environ["SHELL"]],
            "bwrap":      [
                "--die-with-parent",
                # XXX: This will cause emacs(and probably some other apps)
                # to exit if you press Ctrl-g
                #"--unshare-pid",
                "--unshare-ipc",
                "--unshare-cgroup",
                "--unshare-uts",
                "--hostname", "localhost"
            ],
            "nix-shell": ["--pure"],
        }
    }

    p = ArgumentParser(
        description="Nix-cage, sandboxed environments with nix-shell"
    )

    p.add_argument(
        "path",
        nargs="*",
        help=(
            "One or more directories or files which will be mounted into the sandbox. "
            "Paths inside sandbox are same as in host system. "
            "Mounts are read/write by default, but you could change this by appending one "
            "of {} suffixes to the path.".format(
                "|".join([":" + v for v in mount_suffixes])
            )
        )
    )
    p.add_argument(
        "--config",
        help="Config file path, by default it will read JSON config from current directory.",
        default="./nix-cage.json"
    )
    p.add_argument(
        "--command",
        help="Command to execute inside the sandbox"
    )
    p.add_argument(
        "--entrypoint",
        help="Path to shell.nix file which will be passed to nix-shell, by default it is shell.nix from current directory."
    )
    p.add_argument(
        "--show-default-config",
        help="Dumps a default config in JSON.",
        action="store_true"
    )
    p.add_argument(
        "-v",
        "--verbose",
        help="Verbose mode.",
        action="store_true"
    )

    arguments, rest = p.parse_known_args()

    main(
        default_config,
        arguments.__dict__,
        rest
    )
